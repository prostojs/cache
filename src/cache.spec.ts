import { ProstoCache } from '.'

describe('cache', () => {
  it('must cache objects', () => {
    const cache = new ProstoCache()
    cache.set('key', 'object')
    expect(cache.get('key')).toBe('object')
  })
  it('must del object', () => {
    const cache = new ProstoCache()
    cache.set('key', 'object')
    cache.del('key')
    expect(cache.get('key')).toBeUndefined()
  })
  it('must reset cache', () => {
    const cache = new ProstoCache()
    cache.set('key', 'object')
    cache.reset()
    expect(cache.get('key')).toBeUndefined()
  })
  it('must limit cache', () => {
    const cache = new ProstoCache({ limit: 2 })
    cache.set('key1', 'object1')
    cache.set('key2', 'object2')
    cache.set('key3', 'object3')
    expect(cache.get('key3')).toBe('object3')
    expect(cache.get('key2')).toBe('object2')
    expect(cache.get('key1')).toBeUndefined()
  })
  it('must ttl cache', async () => {
    const cache = new ProstoCache({ ttl: 100 })
    cache.set('key1', 'object1')
    cache.set('key2', 'object2')
    cache.set('key3', 'object3', 500)
    await new Promise(resolve => setTimeout(resolve, 10))
    expect(cache.get('key3')).toBe('object3')
    expect(cache.get('key2')).toBe('object2')
    expect(cache.get('key1')).toBe('object1')
    await new Promise(resolve => setTimeout(resolve, 90))
    expect(cache.get('key3')).toBe('object3')
    expect(cache.get('key2')).toBeUndefined()
    expect(cache.get('key1')).toBeUndefined()
    await new Promise(resolve => setTimeout(resolve, 500))
    expect(cache.get('key3')).toBeUndefined()
  })
  it('must prepare timeout when removing first ttl entry', async () => {
    const cache = new ProstoCache({ ttl: 80 })
    cache.set('key1', 'object1')
    await new Promise(resolve => setTimeout(resolve, 2))
    cache.set('key2', 'object2')
    cache.set('key3', 'object3')
    await new Promise(resolve => setTimeout(resolve, 2))
    const spy = jest.spyOn(cache, 'prepareTimeout' as 'get')
    expect(cache.get('key1')).toBe('object1')
    cache.del('key1')
    expect(spy).toHaveBeenCalledTimes(1)
    await new Promise(resolve => setTimeout(resolve, 80))
    expect(cache.get('key3')).toBeUndefined()
  })
  it('must clear timeout on reset', async () => {
    const cache = new ProstoCache({ ttl: 50 })
    cache.set('key1', 'object1')
    await new Promise(resolve => setTimeout(resolve, 2))
    expect(cache['nextTimeout' as 'get']).toBeDefined()
    const spy = jest.spyOn(global, 'clearTimeout')
    cache.reset()
    expect(spy).toHaveBeenCalledWith(cache['nextTimeout' as 'get'])
  })
})
