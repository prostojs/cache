import { ProstoCache } from '.'

describe('cache', () => {
    it('must cache objects', () => {
        const cache = new ProstoCache()
        cache.set('key', 'object')
        expect(cache.get('key')).toEqual('object')
    })
    it('must del object', () => {
        const cache = new ProstoCache()
        cache.set('key', 'object')
        cache.del('key')
        expect(cache.get('key')).toBeUndefined()
    })
    it('must reset cache', () => {
        const cache = new ProstoCache()
        cache.set('key', 'object')
        cache.reset()
        expect(cache.get('key')).toBeUndefined()
    })
    it('must limit cache', () => {
        const cache = new ProstoCache({ limit: 2 })
        cache.set('key1', 'object1')
        cache.set('key2', 'object2')
        cache.set('key3', 'object3')
        expect(cache.get('key3')).toEqual('object3')
        expect(cache.get('key2')).toEqual('object2')
        expect(cache.get('key1')).toBeUndefined()
    })
    it('must ttl cache', async () => {
        const cache = new ProstoCache({ ttl: 5 })
        cache.set('key1', 'object1')
        cache.set('key2', 'object2')
        cache.set('key3', 'object3')
        await new Promise(resolve => setTimeout(resolve, 3))
        expect(cache.get('key3')).toEqual('object3')
        expect(cache.get('key2')).toEqual('object2')
        expect(cache.get('key1')).toEqual('object1')
        await new Promise(resolve => setTimeout(resolve, 3))
        expect(cache.get('key3')).toBeUndefined()
        expect(cache.get('key2')).toBeUndefined()
        expect(cache.get('key1')).toBeUndefined()
    })
    it('must prepare timeout when removing first ttl entry', async () => {
        const cache = new ProstoCache({ ttl: 80 })
        cache.set('key1', 'object1')
        await new Promise(resolve => setTimeout(resolve, 2))
        cache.set('key2', 'object2')
        cache.set('key3', 'object3')
        await new Promise(resolve => setTimeout(resolve, 2))
        const spy = jest.spyOn(cache, 'prepareTimeout' as 'get')
        expect(cache.get('key1')).toEqual('object1')
        cache.del('key1')
        expect(spy).toHaveBeenCalledTimes(1)
        await new Promise(resolve => setTimeout(resolve, 80))
        expect(cache.get('key3')).toBeUndefined()
    })
    it('must clear timeout on reset', async () => {
        const cache = new ProstoCache({ ttl: 50 })
        cache.set('key1', 'object1')
        await new Promise(resolve => setTimeout(resolve, 2))
        expect(cache['nextTimeout' as 'get']).toBeDefined()
        const spy = jest.spyOn(global, 'clearTimeout')
        cache.reset()
        expect(spy).toHaveBeenCalledWith(cache['nextTimeout' as 'get'])
    })
})
